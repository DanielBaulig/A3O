<?php

define('TILE_TYPE_LAND', 0);
define('TILE_TYPE_SEA',  1);

define('TABLE_TILE_VERTICES', 'tile_vertices');
define('TABLE_BASETILES', 'base_tiles');


// TODO Refactor Base Class DatabaseFactory or similar ?
class TileFactory
{
	private $m_pdo;
	private $m_game;
	private $m_tileCache;
	private $m_tilesPrecached = false;
	
	private $m_loadSingleTilePdoStatement;
	private $m_loadAllTilesPdoStatement;
	
	public function __construct(PDO $pdo, $game, $match = NULL)
	{
		$this->m_pdo = $pdo;
		$this->m_game = $game;
		$this->tileCache = array();
		if ($match === NULL)
		{
			try
			{
				$this->m_loadSingleTilePdoStatement = $this->m_pdo->prepare('SELECT * FROM ' . TABLE_BASETILES . ' WHERE tile_name LIKE :name AND tile_gamd_id = :game_id LIMIT 1');
				$this->m_loadSingleTilePdoStatement->bindParam(':game_id', $this->m_game, PDO::PARAM_INT);
			
				$this->m_loadAllTilesPdoStatement = $this->m_pdo->prepare('SELECT * FROM ' . TABLE_BASETILES . ' WHERE tile_game_id = :game_id');
				$this->m_loadAllTilesPdoStatement->bindParam(':game_id', $this->m_game, PDO::PARAM_INT);
			}
			catch (PDOException $e)
			{
				die($e->getMessage());
			}
		}
		else
		{
			// get match specific tile statement
		}
	}
	
	public function getTile($name, $forceReload = false)
	{
		if (!$forceReload && array_key_exists($name, $this->m_tileCache))
		{
			return $this->m_tileCache[$name];
		}
		else
		{
			try
			{
				$this->m_loadSingleTilePdoStatement->bindValue(':name', $name, PDO::PARAM_STR);
				$this->m_loadSingleTilePdoStatement->execute();
			
				
				if ($this->m_loadSingleTilePdoStatement->rowCount() != 1)
				{
					$this->m_loadSingleTilePdoStatement->closeCursor();
					return $this->m_tileCache[$name] = NULL;
				}
				else
				{
					return $this->m_tileCache[$name] = new Tile($this->m_pdo, $this->m_loadSingleTilePdoStatement->fetch(PDO::FETCH_ASSOC));
				}
			}
			catch(PDOException $e)
			{
				die($e->getMessage());
			}
		}
	}
	
	public function &getAllTiles($forceReload = false)
	{
		if (! $this->m_tilesPrecached || $forceReload)
		{
			$this->precacheTiles();
		}
		return $this->m_tileCache;
	}
	
	public function precacheTiles()
	{
		$this->m_tilesPrecached = false;
		$this->m_tileCache = array();
		$this->m_loadAllTilesPdoStatement->execute();
		try
		{
			while($row = $this->m_loadAllTilesPdoStatement->fetch(PDO::FETCH_ASSOC))
			{
				$this->m_tileCache[$row['tile_name']] = new Tile($this->m_pdo, $row);
			}
			$this->m_loadAllTilesPdoStatement->closeCursor();
			$this->m_tilesPrecached = true;
		}
		catch(PDOException $e)
		{
			die($e->getMessage());
		}
	}
}

class Tile
{
	protected $m_pdo;
	
	//////////////////////////
	//  Logical Attributes  //
	//////////////////////////
	/** Array of neighbouring tiles
	 * 
	 * @var array
	 */	
	private $m_neighbours = NULL;
	
	/** Production poitns generated by this tile
	 * 
	 * @var int
	 */
	private $m_production = NULL;
	
	/** Current controller of this tile
	 * 
	 * @var Nation
	 */
	private $m_controller = NULL;
	
	/** Type of th tile (sea or land)
	 * 
	 * @var TILE_TYPE_LAND or TILE_TYPE_SEA
	 */
	private $m_type = NULL;
	
	///////////////////////////
	// Structural Attributes //
	///////////////////////////
	private $m_name = NULL;
	/** The tile polygon's center vertex
	 * 
	 * @var array of int
	 */
	private $m_center = NULL;
	
	/** The tile polygon's vertices
	 * 
	 * @var array of array of int
	 */
	private $m_vertices = NULL;
	private $m_verticesJsonCache = NULL;
	
	protected $m_loadVerticesPdoStatement = NULL;
	protected $m_saveVerticesJsonCachePdoStatement = NULL;
	protected $m_updateVerticesMinMaxCachePdoStatement = NULL;
	
	/** The position of text, units, etc ??? NOT SURE !!!
	 * 
	 * @var array of array of int
	 */
	private $m_places = NULL;
	
	private $m_verticesBoundingBoxUpperLeft = NULL;
	private $m_verticesBoundingBoxLowerRight = NULL;
	
	private $m_id = NULL;
	
	///////////////////////////
	// Methods and Functions //
	///////////////////////////
	
	public function getCenterX()
	{
		return $this->m_center[0];
	}
	
	public function getCenterY()
	{
		return $this->m_center[1];
	}
	
	public function getType()
	{
		return $this->m_type;
	}
	
	public function getController()
	{
		return $this->m_controller;
	}
	
	public function getName()
	{
		return $this->m_name;
	}
	
	protected function assignResult(array $assoc_row)
	{
		if (array_key_exists('tile_id', $assoc_row))
		{
			$this->m_id = $assoc_row['tile_id'];
		}
		if (array_key_exists('tile_name', $assoc_row))
		{
			$this->m_name = $assoc_row['tile_name'];
		}
		if (array_key_exists('tile_production', $assoc_row))
		{
			$this->m_production = $assoc_row['tile_production'];
		}
		if (array_key_exists('tile_type', $assoc_row))
		{
			$this->m_type = $assoc_row['tile_type'];
		}
		if (array_key_exists('tile_startowner_id', $assoc_row))
		{
			$this->m_controller = $assoc_row['tile_startowner_id'];
		}
		if (array_key_exists('tile_center_x', $assoc_row) && array_key_exists('tile_center_y', $assoc_row))
		{
			$this->m_center = array( $assoc_row['tile_center_x'],  $assoc_row['tile_center_y']);
		}
		if (array_key_exists('tile_vertices_max_x', $assoc_row) && array_key_exists('tile_vertices_max_y', $assoc_row))
		{
			$this->m_verticesBoundingBoxLowerRight = array( $assoc_row['tile_vertices_max_x'], $assoc_row['tile_vertices_max_y'] );
		}
		if (array_key_exists('tile_vertices_min_x', $assoc_row) && array_key_exists('tile_vertices_min_y', $assoc_row))
		{
			$this->m_verticesBoundingBoxUpperLeft = array( $assoc_row['tile_vertices_min_x'], $assoc_row['tile_vertices_min_y'] );
		}
		if (array_key_exists('tile_vertices_json_cache', $assoc_row))
		{
			// reular expression matches json [[123,456],[234,567],[345,678],...] with at least 3 [1,0] elements (polygon)
			if (preg_match('/\[(\[\d+,\d+\],?){3,}\]/', $assoc_row['tile_vertices_json_cache']))
			{
				$this->m_verticesJsonCache = $assoc_row['tile_vertices_json_cache'];
			}
		}
	}
	
	public function __construct(PDO $database, array $assoc_row = NULL)
	{
		$this->m_pdo = $database;

		if ($assoc_row !== NULL)
		{
			$this->assignResult($assoc_row);
		}
		try
		{
			$this->m_loadVerticesPdoStatement = $this->m_pdo->prepare('SELECT x, y FROM ' . TABLE_TILE_VERTICES . ' WHERE vertex_tile_id = :tile_id;', array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
			$this->m_loadVerticesPdoStatement->bindParam(':tile_id', $this->m_id, PDO::PARAM_INT);
			
			$this->m_saveVerticesJsonCachePdoStatement = $this->m_pdo->prepare('UPDATE ' . TABLE_BASETILES . ' SET tile_vertices_json_cache = :vertices_json_cache WHERE tile_id = :tile_id');
			$this->m_saveVerticesJsonCachePdoStatement->bindParam(':tile_id', $this->m_id, PDO::PARAM_INT);
			$this->m_saveVerticesJsonCachePdoStatement->bindParam(':vertices_json_cache', $this->m_verticesJsonCache, PDO::PARAM_STR);
			
			$this->m_updateVerticesMinMaxCachePdoStatement = $this->m_pdo->prepare('UPDATE ' . TABLE_BASETILES . ' bt, (SELECT MAX(x) AS max, MIN(x) AS mix, MAX(y) AS may, MIN(y) AS miy, vertex_tile_id FROM ' . TABLE_TILE_VERTICES . ' GROUP BY vertex_tile_id) ss SET bt.tile_vertices_max_x=ss.max, bt.tile_vertices_min_x=ss.mix, bt.tile_vertices_max_y=ss.may, bt.tile_vertices_min_y=ss.miy WHERE bt.tile_id=ss.vertex_tile_id');
		}
		catch(PDOException $e)
		{
			die($e->getMessage());
		}
	}
	
	/** Calculates the path to another tile using A*
	 * 
	 * @param Tile $other
	 * @returns array of Tile
	 */
	public function &pathTo(Tile $other)
	{
		// do A*
		return $other;
	}
	
	protected function buildVerticesJSONCache()
	{
		if ($this->m_vertices === NULL)
		{
			$this->loadVertices();
		}
		
		$json = '[';	
		foreach($this->m_vertices as &$vertex)
		{
			$json .= '[' . $vertex[0] . ',' . $vertex[1] . '],';					
		}
		$json = trim($json, ',');
		$json .= ']';
		$this->m_verticesJsonCache = $json;
		$this->m_pdo->beginTransaction();
		try
		{
			$this->m_saveVerticesJsonCachePdoStatement->execute();
			$this->m_updateVerticesMinMaxCachePdoStatement->execute();
			$this->m_pdo->commit();
		}
		catch(PDOException $e)
		{
			$this->m_pdo->rollBack();
			die($e->getMessage());
		}
	}
	
	public function getVerticesAsJson()
	{
		if ($this->m_verticesJsonCache === NULL)
		{
			$this->buildVerticesJSONCache();
		}
		return $this->m_verticesJsonCache;
	}
	
	public function getVerticesBoundingBoxAsJson()
	{
		return '{"upperleft":[' . $this->m_verticesBoundingBoxUpperLeft[0] . ',' . $this->m_verticesBoundingBoxUpperLeft[1] . '],"lowerright":[' . $this->m_verticesBoundingBoxLowerRight[0] . ','. $this->m_verticesBoundingBoxLowerRight[1] . ']}';
	}
	
	public function getCenterAsJson()
	{
		return '[' . $this->m_center[0] . ',' . $this->m_center[1] . ']';
	}
	
	public function getTileAsJson()
	{		
		return '{"vertices":' . $this->getVerticesAsJson() .
				',"name":"' . $this->m_name . '"' .
				',"center":' . $this->getCenterAsJson() .
				',"type":' . $this->m_type .
				',"boundingbox":' . $this->getVerticesBoundingBoxAsJson() . '}';
	}
	
	public function loadVertices()
	{	
		try
		{
			$this->m_loadVerticesPdoStatement->execute();
			
			$this->m_vertices = array();
			
			while ($row = $this->m_loadVerticesPdoStatement->fetch(PDO::FETCH_ASSOC, PDO::FETCH_ORI_NEXT))
			{
				$this->m_vertices[] = array($row['x'], $row['y']);
			}
			$this->m_loadVerticesPdoStatement->closeCursor();
		}
		catch(PDOException $e)
		{
			die($e->getMessage());
		}
	}
}

?>