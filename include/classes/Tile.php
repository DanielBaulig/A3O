<?php

define('TILE_TYPE_LAND', 0);
define('TILE_TYPE_SEA',  1);

define('TABLE_TILE_VERTICES', 'tile_vertices');
define('TABLE_TILES', 'tiles');

class Tile
{
	protected $m_pdo;
	
	//////////////////////////
	//  Logical Attributes  //
	//////////////////////////
	/** Array of neighbouring tiles
	 * 
	 * @var array
	 */	
	private $m_neighbours;
	
	/** Production poitns generated by this tile
	 * 
	 * @var int
	 */
	private $m_production;
	
	/** Current controller of this tile
	 * 
	 * @var Nation
	 */
	private $m_controller;
	
	/** Type of th tile (sea or land)
	 * 
	 * @var TILE_TYPE_LAND or TILE_TYPE_SEA
	 */
	private $m_type;
	
	///////////////////////////
	// Structural Attributes //
	///////////////////////////
	private $m_name;
	/** The tile polygon's center vertex
	 * 
	 * @var array of int
	 */
	private $m_center;
	
	/** The tile polygon's vertices
	 * 
	 * @var array of array of int
	 */
	private $m_vertices = NULL;
	private $m_verticesJsonCache = NULL;
	
	protected $m_loadVerticesPdoStatement = NULL;
	
	/** The position of text, units, etc ??? NOT SURE !!!
	 * 
	 * @var array of array of int
	 */
	private $m_places;
	
	private $m_id;
	
	///////////////////////////
	// Methods and Functions //
	///////////////////////////
	
	public function getCenterX()
	{
		return $this->m_center[0];
	}
	
	public function getCenterY()
	{
		return $this->m_center[1];
	}
	
	public function getType()
	{
		return $this->m_type;
	}
	
	public function getController()
	{
		return $this->m_controller;
	}
	
	public function __construct(PDO $database, array $assoc_row = NULL)
	{
		$this->m_pdo = $database;

		if ($assoc_row !== NULL)
		{
			if (array_key_exists('tile_id', $assoc_row))
			{
				$this->m_id = $assoc_row['tile_id'];
			}
			if (array_key_exists('tile_name', $assoc_row))
			{
				$this->m_name = $assoc_row['tile_name'];
			}
			if (array_key_exists('tile_production', $assoc_row))
			{
				$this->m_production = $assoc_row['tile_production'];
			}
			if (array_key_exists('tile_type', $assoc_row))
			{
				$this->m_type = $assoc_row['tile_type'];
			}
			if (array_key_exists('tile_startowner_id', $assoc_row))
			{
				$this->m_controller = $assoc_row['tile_startowner_id'];
			}
			if (array_key_exists('tile_center_x', $assoc_row) && array_key_exists('tile_center_y', $assoc_row))
			{
				$this->m_center = array( $assoc_row['tile_center_x'],  $assoc_row['tile_center_y']);
			}
		}
		try
		{
			$this->m_loadVerticesPdoStatement = $this->m_pdo->prepare('SELECT x, y FROM ' . TABLE_TILE_VERTICES . ' WHERE vertex_tile_id = :tile_id;', array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
			$this->m_loadVerticesPdoStatement->bindParam(':tile_id', $this->m_id, PDO::PARAM_INT);
		}
		catch(PDOException $e)
		{
			die($e->getMessage());
		}
	}
	
	/** Calculates the path to another tile using A*
	 * 
	 * @param Tile $other
	 * @returns array of Tile
	 */
	public function &pathTo(Tile &$other)
	{
		// do A*
		return $other;
	}
	
	protected function buildVerticesJSONCache()
	{
		if ($this->m_vertices === NULL)
		{
			$this->loadVertices();
		}
		
		$json = '[ ';	
		foreach($this->m_vertices as &$vertex)
		{
			$json .= '[ ' . $vertex[0] . ', ' . $vertex[1] . ' ], ';					
		}
		$json = trim($json, ', ');
		$json .= ' ]';
		$this->m_verticesJsonCache = $json;
	}
	
	public function &getVerticesAsJson()
	{
		if ($this->m_verticesJsonCache === NULL)
		{
			$this->buildVerticesJSONCache();
		}
		return $this->m_verticesJsonCache;
	}
	
	public function &getCenterAsJson()
	{
		return '[ ' . $this->m_center[0] . ', ' . $this->m_center[1] . ' ]';
	}
	
	public function &getTileAsJson()
	{
		$json = '{ "vertices" : ' . $this->getVerticesAsJson();
		$json .= ', "center" : ' . $this->getCenterAsJson();
		$json .= ', "type" : ' . $this->m_type;
		$json .= ', "controller" : ' . ($this->m_controller ? '1' : '0') . ' }';
		return $json;
	}
	
	public function loadVertices()
	{	
		try
		{
			$this->m_loadVerticesPdoStatement->execute();
			
			$this->m_vertices = array();
			
			while ($row = $this->m_loadVerticesPdoStatement->fetch(PDO::FETCH_ASSOC, PDO::FETCH_ORI_NEXT))
			{
				$this->m_vertices[] = array($row['x'], $row['y']);
			}
		}
		catch(PDOException $e)
		{
			die($e->getMessage());
		}
	}
	
	private static $m_loadGameTilesPdoStatement = NULL;
	//TODO: Refactor $game_id for Game $game ?
	public static function &loadGameTiles(PDO $pdo, $game_id)
	{
		try
		{
			if (Tile::$m_loadGameTilesPdoStatement === NULL)
			{
				Tile::$m_loadGameTilesPdoStatement = $pdo->prepare('SELECT tile_id, tile_game_id, tile_type, tile_name, tile_startowner_id, tile_production, tile_center_x, tile_center_y FROM ' . TABLE_TILES . ' WHERE tile_game_id = :game_id', array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
			}
			Tile::$m_loadGameTilesPdoStatement->bindValue(':game_id', $game_id, PDO::PARAM_INT);
			Tile::$m_loadGameTilesPdoStatement->execute();
			
			$gameTiles = array();
			
			while ($row = Tile::$m_loadGameTilesPdoStatement->fetch(PDO::FETCH_ASSOC, PDO::FETCH_ORI_NEXT))
			{
				$gameTiles[] = new Tile($pdo, $row);
			}
			
			return $gameTiles;
		}
		catch(PDOException $e)
		{
			die($e->getMessage());
		}
	}
}

?>